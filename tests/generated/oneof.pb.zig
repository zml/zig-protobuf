// Code generated by protoc-gen-zig
///! package tests.oneof
const std = @import("std");
const Allocator = std.mem.Allocator;
const ArrayListU = std.ArrayListUnmanaged;

const protobuf = @import("protobuf");
const ManagedString = protobuf.ManagedString;
const fd = protobuf.fd;

test {
    std.testing.refAllDeclsRecursive(@This());
}

pub const Enum = enum(i32) {
    UNSPECIFIED = 0,
    SOMETHING = 1,
    SOMETHING2 = 2,
    _,
};

pub const Message = struct {
    value: i32 = 0,
    str: ManagedString = .Empty,

    pub const _desc_table = .{
        .value = fd(1, .{ .Varint = .Simple }),
        .str = fd(2, .String),
    };

    pub const encode = protobuf.MessageMixins(@This()).encode;
    pub const decode = protobuf.MessageMixins(@This()).decode;
    pub const init = protobuf.MessageMixins(@This()).init;
    pub const deinit = protobuf.MessageMixins(@This()).deinit;
    pub const dupe = protobuf.MessageMixins(@This()).dupe;
    pub const jsonStringify = protobuf.MessageMixins(@This()).jsonStringify;
    pub const json_decode = protobuf.MessageMixins(@This()).json_decode;
    pub const json_encode = protobuf.MessageMixins(@This()).json_encode;
    pub const jsonParse = protobuf.MessageMixins(@This()).jsonParse;
};

pub const OneofContainer = struct {
    regular_field: ManagedString = .Empty,
    enum_field: Enum = @enumFromInt(0),
    some_oneof: ?union(enum) {
        string_in_oneof: ManagedString,
        message_in_oneof: Message,
        a_number: i32,
        enum_value: Enum,
        pub const _union_desc = .{
            .string_in_oneof = fd(1, .String),
            .message_in_oneof = fd(2, .{ .SubMessage = {} }),
            .a_number = fd(3, .{ .Varint = .Simple }),
            .enum_value = fd(6, .{ .Varint = .Simple }),
        };
    },

    pub const _desc_table = .{
        .regular_field = fd(4, .String),
        .enum_field = fd(5, .{ .Varint = .Simple }),
        .some_oneof = fd(null, .{ .OneOf = std.meta.Child(std.meta.FieldType(@This(), .some_oneof)) }),
    };

    pub const encode = protobuf.MessageMixins(@This()).encode;
    pub const decode = protobuf.MessageMixins(@This()).decode;
    pub const init = protobuf.MessageMixins(@This()).init;
    pub const deinit = protobuf.MessageMixins(@This()).deinit;
    pub const dupe = protobuf.MessageMixins(@This()).dupe;
    pub const jsonStringify = protobuf.MessageMixins(@This()).jsonStringify;
    pub const json_decode = protobuf.MessageMixins(@This()).json_decode;
    pub const json_encode = protobuf.MessageMixins(@This()).json_encode;
    pub const jsonParse = protobuf.MessageMixins(@This()).jsonParse;
};

pub const NestedOneofContainer = struct {
    failure: ?NestedOneofContainer.AnotherContainer = null,
    key: ?union(enum) {
        a: ManagedString,
        b: i64,
        pub const _union_desc = .{
            .a = fd(5, .String),
            .b = fd(6, .{ .Varint = .Simple }),
        };
    },

    pub const _desc_table = .{
        .failure = fd(7, .{ .SubMessage = {} }),
        .key = fd(null, .{ .OneOf = std.meta.Child(std.meta.FieldType(@This(), .key)) }),
    };

    pub const AnotherContainer = struct {
        buffer_address: i64 = 0,
        key: ?union(enum) {
            a: ManagedString,
            b: i64,
            pub const _union_desc = .{
                .a = fd(11, .String),
                .b = fd(12, .{ .Varint = .Simple }),
            };
        },

        pub const _desc_table = .{
            .buffer_address = fd(13, .{ .Varint = .Simple }),
            .key = fd(null, .{ .OneOf = std.meta.Child(std.meta.FieldType(@This(), .key)) }),
        };

        pub const encode = protobuf.MessageMixins(@This()).encode;
        pub const decode = protobuf.MessageMixins(@This()).decode;
        pub const init = protobuf.MessageMixins(@This()).init;
        pub const deinit = protobuf.MessageMixins(@This()).deinit;
        pub const dupe = protobuf.MessageMixins(@This()).dupe;
        pub const jsonStringify = protobuf.MessageMixins(@This()).jsonStringify;
        pub const json_decode = protobuf.MessageMixins(@This()).json_decode;
        pub const json_encode = protobuf.MessageMixins(@This()).json_encode;
        pub const jsonParse = protobuf.MessageMixins(@This()).jsonParse;
    };

    pub const encode = protobuf.MessageMixins(@This()).encode;
    pub const decode = protobuf.MessageMixins(@This()).decode;
    pub const init = protobuf.MessageMixins(@This()).init;
    pub const deinit = protobuf.MessageMixins(@This()).deinit;
    pub const dupe = protobuf.MessageMixins(@This()).dupe;
    pub const jsonStringify = protobuf.MessageMixins(@This()).jsonStringify;
    pub const json_decode = protobuf.MessageMixins(@This()).json_decode;
    pub const json_encode = protobuf.MessageMixins(@This()).json_encode;
    pub const jsonParse = protobuf.MessageMixins(@This()).jsonParse;
};
